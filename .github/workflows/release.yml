name: Release

on:
  workflow_call:
    inputs:
      python-version:
        description: 'Python version to use'
        required: false
        default: '3.x'
        type: string
      windows-entry-script:
        description: 'Entry script for PyInstaller (Windows build); leave empty to skip'
        required: false
        default: ''
        type: string
      windows-exe-name:
        description: 'Name for the Windows executable'
        required: false
        default: 'common_utils'
        type: string
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ github.event.inputs.python-version || '3.x' }}

      - name: Set up uv
        uses: astral-sh/setup-uv@v1

      - name: Set up virtual environment
        run: uv venv

      - name: Install dependencies
        run: |
          if [ -f requirements.txt ]; then
            uv pip install -r requirements.txt
          elif [ -f pyproject.toml ]; then
            uv pip install -e .
          fi
          uv pip install build pytest

      - name: Run tests
        run: |
          if [ -d tests ]; then uv run pytest; else echo 'No tests to run'; fi

      - name: Build distributions
        run: uv run python -m build

      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign artifacts
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          for file in dist/*; do
            cosign sign-blob --yes "$file" \
              --output-signature "$file.sig" \
              --output-certificate "$file.pem"
          done

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: dist/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  windows-exe:
    runs-on: windows-latest
    permissions:
      contents: write
      id-token: write
    defaults:
      run:
        shell: bash
    env:
      WINDOWS_ENTRY_SCRIPT: ${{ github.event.inputs.windows-entry-script }}
      WINDOWS_EXE_NAME: ${{ github.event.inputs.windows-exe-name || 'common_utils' }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ github.event.inputs.python-version || '3.x' }}

      - name: Determine entry script
        run: |
          script="${{ env.WINDOWS_ENTRY_SCRIPT }}"
          if [ -z "$script" ] && [ -f pyproject.toml ]; then
            script=$(python - <<'PY'
            from pathlib import Path
            try:
                import tomllib
            except Exception:
                tomllib = None
            try:
                if tomllib:
                    data = tomllib.loads(Path('pyproject.toml').read_text())
                    scripts = data.get('project', {}).get('scripts', {})
                    if scripts:
                        print(next(iter(scripts.values())))
            except Exception:
                pass
            PY
            )
          fi
          if [ -z "$script" ]; then
            script=$(rg -l "__main__" -g "*.py" | head -n 1 || true)
          fi
          echo "WINDOWS_ENTRY_SCRIPT=$script" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller pytest
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          elif [ -f pyproject.toml ]; then
            pip install -e .
          fi

      - name: Run tests
        run: |
          if [ -d tests ]; then pytest; else echo 'No tests to run'; fi

      - name: Build executable
        run: |
          if [ -n "$WINDOWS_ENTRY_SCRIPT" ] && [ -f "$WINDOWS_ENTRY_SCRIPT" ]; then
            pyinstaller --onefile -n "$WINDOWS_EXE_NAME" "$WINDOWS_ENTRY_SCRIPT"
          else
            echo "No entry script found; skipping Windows executable build"
          fi

      - name: Install cosign
        if: ${{ hashFiles(format('dist/{0}.exe', env.WINDOWS_EXE_NAME)) != '' }}
        uses: sigstore/cosign-installer@v3

      - name: Sign executable
        if: ${{ hashFiles(format('dist/{0}.exe', env.WINDOWS_EXE_NAME)) != '' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign sign-blob --yes dist/${{ env.WINDOWS_EXE_NAME }}.exe \
            --output-signature dist/${{ env.WINDOWS_EXE_NAME }}.exe.sig \
            --output-certificate dist/${{ env.WINDOWS_EXE_NAME }}.exe.pem

      - name: Upload Windows assets
        if: ${{ hashFiles(format('dist/{0}.exe', env.WINDOWS_EXE_NAME)) != '' }}
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/${{ env.WINDOWS_EXE_NAME }}.exe
            dist/${{ env.WINDOWS_EXE_NAME }}.exe.sig
            dist/${{ env.WINDOWS_EXE_NAME }}.exe.pem
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
